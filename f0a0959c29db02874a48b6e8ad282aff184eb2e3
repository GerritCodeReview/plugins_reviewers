{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1a3375ef_44deb252",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/reviewers/ReviewersConfigValidator.java",
        "patchSetId": 15
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-08T10:06:54Z",
      "side": 1,
      "message": "Should this be annotated with @Singleton?",
      "revId": "f0a0959c29db02874a48b6e8ad282aff184eb2e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4e2f489_f2cc4f09",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/reviewers/ReviewersConfigValidator.java",
        "patchSetId": 15
      },
      "lineNbr": 70,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-08T10:06:54Z",
      "side": 1,
      "message": "I would handle these exceptions separately.\n\nIOException doesn\u0027t mean that the config is malformed, but that there was an IO error while trying to load it. In this case the error message should say something like \"failed to validate ... config\".\n\nThe message of ConfigInvalidException points out what exactly is invalid (e.g. which line). That seems to be valuable information that you may want to include into the error message.",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 54
      },
      "revId": "f0a0959c29db02874a48b6e8ad282aff184eb2e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2244ed15_1bf15f6c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/reviewers/ReviewersConfigValidator.java",
        "patchSetId": 15
      },
      "lineNbr": 71,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-08T10:06:54Z",
      "side": 1,
      "message": "When catching an exception and throwing a new exception, always provide the caught exception as cause for the new exception.",
      "range": {
        "startLine": 71,
        "startChar": 6,
        "endLine": 71,
        "endChar": 59
      },
      "revId": "f0a0959c29db02874a48b6e8ad282aff184eb2e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1fae36e_ef2ec098",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/reviewers/ReviewersConfigValidator.java",
        "patchSetId": 15
      },
      "lineNbr": 79,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-08T10:06:54Z",
      "side": 1,
      "message": "[optional] Instead of validating the filters here, you may do this already in ReviewersConfig.ForProject#onLoad. E.g. let ReviewersConfig.ForProject implement ValidationError.Sink similar to how ProjectConfig in Gerrit core collects validation errors on load.",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "f0a0959c29db02874a48b6e8ad282aff184eb2e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03537201_9625fd09",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/reviewers/ReviewersConfigValidator.java",
        "patchSetId": 15
      },
      "lineNbr": 98,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-08T10:06:54Z",
      "side": 1,
      "message": "same as above :)",
      "range": {
        "startLine": 89,
        "startChar": 6,
        "endLine": 98,
        "endChar": 7
      },
      "revId": "f0a0959c29db02874a48b6e8ad282aff184eb2e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71eb20ea_1e65e55e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/reviewers/ReviewersQueryValidator.java",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-08T10:06:54Z",
      "side": 1,
      "message": "ChangeQueryBuilder is not a singleton, hence I think this should be Provider\u003cChangeQueryBuilder\u003e.",
      "range": {
        "startLine": 25,
        "startChar": 16,
        "endLine": 25,
        "endChar": 34
      },
      "revId": "f0a0959c29db02874a48b6e8ad282aff184eb2e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1185d30d_1d9f11ce",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/reviewers/ReviewersQueryValidator.java",
        "patchSetId": 15
      },
      "lineNbr": 37,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-08T10:06:54Z",
      "side": 1,
      "message": "Consider including e.getMessage as well, as it will tell you which predicate in the filter is invalid.",
      "range": {
        "startLine": 37,
        "startChar": 24,
        "endLine": 37,
        "endChar": 51
      },
      "revId": "f0a0959c29db02874a48b6e8ad282aff184eb2e3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}