{
  "comments": [
    {
      "key": {
        "uuid": "8c930559_36ad6f02",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 37,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-09T22:15:15Z",
      "side": 1,
      "message": "return is unnecessary, as the last statement in a function with no return value.",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 13
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3864ac1d_6c734d07",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 37,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2019-09-10T07:17:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c930559_36ad6f02",
      "range": {
        "startLine": 37,
        "startChar": 6,
        "endLine": 37,
        "endChar": 13
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22c3d8aa_3e80bd2e",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 49,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-09T22:15:15Z",
      "side": 1,
      "message": "Nit: Unterminated statement.",
      "range": {
        "startLine": 49,
        "startChar": 6,
        "endLine": 49,
        "endChar": 25
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b51aedaa_8454c1b7",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 49,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2019-09-10T07:17:08Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "22c3d8aa_3e80bd2e",
      "range": {
        "startLine": 49,
        "startChar": 6,
        "endLine": 49,
        "endChar": 25
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ae80032_5cdc96a6",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 66,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-09T22:15:15Z",
      "side": 1,
      "message": "Promise returned from all is ignored. You want to wait until the promise is resolved, e.g.:\n\n  Promise.all(promises).then(() \u003d\u003e {\n    this._loading \u003d false;\n  });\n\nor something similar.",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 28
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3509369_e5f2d0f4",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 66,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-10T05:57:47Z",
      "side": 1,
      "message": "On second thought, why don\u0027t we use async methods here? Wouldn\u0027s something like this work (untested):\n\n  attached() {\n\tthis._retrieveProjectOwner();\n\tthis._retrieveModifyReviewersConfig();\n      },\n      \n      async _retrieveProjectOwner() {\n\t  var access;\n          # Is this check really needed?\n\t  if (!this.repoName) {\n\t      return;\n\t  }\n\t  acess \u003d await this._getRepoAccess(this.repoName);\n\t  if (access \u0026\u0026 access[this.repoName] \u0026\u0026 access[this.repoName].is_owner) {\n              this._isOwner \u003d true;\n          }\n      },\n\n      async _retrieveModifyReviewersConfig() {\n          # Shoulnd\u0027t we first check whether a user is logged on,\n          # or is it guaranteed by the repo-command API?\n\t  var capabilities \u003d await this.plugin.restApi().get(\u0027/accounts/self/capabilities\u0027);\n\t  if (capabilities[\u0027reviewers-modifyReviewersConfig\u0027]) {\n            this._hasModifyCapability \u003d true;\n          }\n      },",
      "parentUuid": "2ae80032_5cdc96a6",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 28
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b4c0614_74c6d427",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 66,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2019-09-10T07:17:08Z",
      "side": 1,
      "message": "I removed the Promise array since it wasn\u0027t necessary.\nWhy would we need async?\nDoesn\u0027t Polymer notice when _isOwner and _hasModifyCapability changes and recomputes _canModifyConfig?\nIf we don\u0027t need async I see no point in using it.",
      "parentUuid": "f3509369_e5f2d0f4",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 28
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f952cd3c_8713596b",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 66,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-10T08:32:04Z",
      "side": 1,
      "message": "But the requests are run asynchronously by their nature. And the UI has to account for that. Imagine, even if it is not really probable, that on very busy site, with tons users, both requests to retrieve the owner and to read user capabilities would take ca. 30 seconds.\n\nHow should the UI behave during this time? The user cannot change anything in reviewers configuration (per default?), but what would indicate to the user, that this situation might change later and he would get the ACL? What if the user give up in this time and push Ctrl-W button in her browser?\n\nThat why the usual behaviour in PolyGerrit (and GWT UI) for that major use case: To disable parts of the UI, put \"Loading...\" on the loading page, and change the state and remove \"Loading...\" message, when all requests are accomplished and all Promises are resolved.",
      "parentUuid": "8b4c0614_74c6d427",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 28
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a3c8a42_78bf2796",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 66,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2019-09-10T09:37:14Z",
      "side": 1,
      "message": "But we don\u0027t need async for this right? That would be your first option. \"Promise.all then _loading \u003d false\"",
      "parentUuid": "f952cd3c_8713596b",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 28
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "430a6bc5_d3c0b7b5",
        "filename": "gr-reviewers/gr-reviewers.js",
        "patchSetId": 22
      },
      "lineNbr": 66,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2019-09-10T10:21:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a3c8a42_78bf2796",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 28
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a117837_b2779996",
        "filename": "gr-reviewers/rv-edit-screen.js",
        "patchSetId": 22
      },
      "lineNbr": 36,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-09T22:15:15Z",
      "side": 1,
      "message": "Unused parameter canModifyConfig.",
      "range": {
        "startLine": 36,
        "startChar": 31,
        "endLine": 36,
        "endChar": 46
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e2f6fea_8ba6b03c",
        "filename": "gr-reviewers/rv-edit-screen.js",
        "patchSetId": 22
      },
      "lineNbr": 36,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2019-09-10T07:17:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a117837_b2779996",
      "range": {
        "startLine": 36,
        "startChar": 31,
        "endLine": 36,
        "endChar": 46
      },
      "revId": "58474af323b30aaa5dad784ea7a4eb3396bd8f37",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}